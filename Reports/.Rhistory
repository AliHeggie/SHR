#Add packages
#Set working directory
setwd("C:\Users\Alastair\Documents\PhD Data\Yola feeder")
#IMPORT DATA
UOBFiles <- read.csv(feeder)
UOBFiles <- read.csv(feeder)
setwd("C:\Users\Alastair\Documents\PhD Data\Yola feeder")
x11()
par(mar=c(10.1,4.1,4.1,2.1))
#boxplot(feeders[1:61,2:35], las = 2,ylim=c(0,350))
boxplot(incomers[1:61,2:14], las = 2,ylim=c(0,650))
#boxplot(t(station$nameplate),add=T, col=3, border=3,yaxt='n',xaxt='n')
#legend( x= "topright", y=0.92, lwd = 3 ,
#        legend=c("Nameplate Capacity"),
#        col=c("green"),
#        pch=c("-"))
x11()
par(mar = c(5, 4, 4, 4) + 0.3)  # Leave space for z axis
plot(data$National,type = 'l',col='red') # first plot
par(new = TRUE)
plot(data$YEDC, type = "l", axes = FALSE, bty = "n", xlab = "", ylab = "")
axis(side=4, at = pretty(range(z)))
#SET WORKING DIRECTORY
#setwd("C:/Users/Alastair/Dropbox/PhD/Nigeria OPF Paper/Models/Gen Data")
#setwd("C:/Users/s0822514/Dropbox/PhD/Nigeria OPF Paper/Models/Gen Data")
#setwd("/home/s0822514/Nigeria OPF/Numerical work/R code/Analyse OPF results - 2014_2015 Genscenarios")
setwd("S:/Nigeria OPF/Numerical work/R code/Analyse OPF results - 2014_2015 Genscenarios")
#IMPORT RUN DATA
uob <- read.table("UOB_filtered.csv", header=TRUE, sep=",")
pgen <- read.table("peak genb.csv", header=TRUE, sep=",")
#results <- read.table("150910_genscenarioruns.csv", header=TRUE, sep=",") #gen statuses corrected by rounding # load scale =  1.3 C = 2
#results <- read.table("150910a_genscenarioruns.csv", header=TRUE, sep=",") #gen statuses corrected by rounding # load scale =  1.4 C = 4
results <- read.table("150910b_genscenarioruns.csv", header=TRUE, sep=",") # gen statuses corrected by rounding # load scale =  1.3 C = 0
#results <- read.table("150910c_genscenarioruns.csv", header=TRUE, sep=",") # gen statuses corrected by rounding # load scale =  1.3 C = 3
#results <- read.table("150909_genscenarioruns.csv", header=TRUE, sep=",") #1.5 load scaling, gen statuses corrected by rounding
#results <- read.table("150903_genscenarioruns.csv", header=TRUE, sep=",") #gen statuses incorrect due to rounding
#results <- read.table("150908_genscenarioruns.csv", header=TRUE, sep=",") #1.5 load scaling, gen statuses incorrect due to rounding
#COMPILE STATION DATA
station <- read.table("station_data.csv", header =TRUE,sep=",", row.names=1)
max_uob<-apply(uob,2,max)
station<-merge(station, max_uob, by=0)
#DATA ADJUSTEMENTS
uob$SHIRORO[815] <- 271.5 #data for shiroro 10x too large
uob$total<-rowSums(uob)
uob$run<-rownames(uob)
uob<-uob[!(uob$run %in% c(656,698,817,815)),]   #uob data for these runs are corrupt
uob<- uob[(456:855),]	#uob data is unreliable before this run
uob<- uob[(uob$total<5000),]
uob<- uob[(uob$total>2500),]
#MERGE RESULTS WITH PGEN AND AVAILABLE CAPACITY DATA
m = merge(uob, results, all = FALSE)
m = merge(m, pgen, all = FALSE)
#m<-m[!(m$run %in% c(656,698,817)),he]
myvars <- c("run","total","peakgen","total_load","total_gen","status","date")
tall <- m[myvars]
#SELECT FEASIBLE CASES AND REORDER BY AVAILABLE CAPACITY
tfeas<-tall[(tall$status %in% c(0)),]
tall<- tall[order(tall$total),]
tfeas<- tfeas[order(tfeas$total),]
#BOX PLOTS
#x11()
#par(mar=c(10.1,4.1,4.1,2.1))
#boxplot(uob[,(1:21)], las = 2,ylim=c(0,1400))
#boxplot(t(station$nameplate),add=T, col=3, border=3,yaxt='n',xaxt='n')
#legend( x= "topright", y=0.92, lwd = 3 ,
#        legend=c("Nameplate Capacity"),
#        col=c("green"),
#        pch=c("-"))
x11()
plot(tfeas$total,tfeas$total,
#type="o",
cex = .7, col="blue",xaxs="i",
yaxs="i",ylim=c(2000,5000),#ann  = FALSE,
#xaxt="n",
xlab="Available Generating Capacity", ylab="MW")
axis(1, at=1:length(tfeas$peakgen),labels=tfeas$date, las=2)
points(tfeas$total,tfeas$total_gen,
#type="o",
cex = .7,col="red")
points(tfeas$total,tfeas$total_load,
#type="o",
cex = .7,col="green")
# lines(tfeas$total,tfeas$peakgen, type="o",cex = .7,col="red")
# #lines(tfeas$total,tfeas$total_gen, type="o",cex = .7, pch=22, lty=2, col="green")
# #lines(tfeas$total,tfeas$total_load, type="o",cex = .7, pch=22, lty=2, col="black")
#
#
#
legend( x= "bottomright", y=0.92, lwd = 3,
legend=c("Available Capacity", "Modelled Gen", "Modelled Load Supplied"),
col=c("blue", "red", "green"),
pch=c("-","-", "-", "-"))
#SET WORKING DIRECTORY
#setwd("C:/Users/Alastair/Dropbox/PhD/Nigeria OPF Paper/Models/Gen Data")
#setwd("C:/Users/s0822514/Dropbox/PhD/Nigeria OPF Paper/Models/Gen Data")
#setwd("/home/s0822514/Nigeria OPF/Numerical work/R code/Analyse OPF results - 2014_2015 Genscenarios")
setwd("S:/Nigeria OPF/Numerical work/R code/Analyse OPF results - 2014_2015 Genscenarios")
#IMPORT RUN DATA
uob <- read.table("UOB_filtered.csv", header=TRUE, sep=",")
pgen <- read.table("peak genb.csv", header=TRUE, sep=",")
#results <- read.table("150910_genscenarioruns.csv", header=TRUE, sep=",") #gen statuses corrected by rounding # load scale =  1.3 C = 2
#results <- read.table("150910a_genscenarioruns.csv", header=TRUE, sep=",") #gen statuses corrected by rounding # load scale =  1.4 C = 4
results <- read.table("150910b_genscenarioruns.csv", header=TRUE, sep=",") # gen statuses corrected by rounding # load scale =  1.3 C = 0
#results <- read.table("150910c_genscenarioruns.csv", header=TRUE, sep=",") # gen statuses corrected by rounding # load scale =  1.3 C = 3
#results <- read.table("150909_genscenarioruns.csv", header=TRUE, sep=",") #1.5 load scaling, gen statuses corrected by rounding
#results <- read.table("150903_genscenarioruns.csv", header=TRUE, sep=",") #gen statuses incorrect due to rounding
#results <- read.table("150908_genscenarioruns.csv", header=TRUE, sep=",") #1.5 load scaling, gen statuses incorrect due to rounding
#COMPILE STATION DATA
station <- read.table("station_data.csv", header =TRUE,sep=",", row.names=1)
max_uob<-apply(uob,2,max)
station<-merge(station, max_uob, by=0)
#DATA ADJUSTEMENTS
uob$SHIRORO[815] <- 271.5 #data for shiroro 10x too large
uob$total<-rowSums(uob)
uob$run<-rownames(uob)
uob<-uob[!(uob$run %in% c(656,698,817,815)),]   #uob data for these runs are corrupt
uob<- uob[(456:855),]	#uob data is unreliable before this run
uob<- uob[(uob$total<5000),]
uob<- uob[(uob$total>2500),]
#MERGE RESULTS WITH PGEN AND AVAILABLE CAPACITY DATA
m = merge(uob, results, all = FALSE)
m = merge(m, pgen, all = FALSE)
#m<-m[!(m$run %in% c(656,698,817)),he]
myvars <- c("run","total","peakgen","total_load","total_gen","status","date")
tall <- m[myvars]
#SELECT FEASIBLE CASES AND REORDER BY AVAILABLE CAPACITY
tfeas<-tall[(tall$status %in% c(0)),]
tall<- tall[order(tall$total),]
tfeas<- tfeas[order(tfeas$total),]
#BOX PLOTS
#x11()
#par(mar=c(10.1,4.1,4.1,2.1))
#boxplot(uob[,(1:21)], las = 2,ylim=c(0,1400))
#boxplot(t(station$nameplate),add=T, col=3, border=3,yaxt='n',xaxt='n')
#legend( x= "topright", y=0.92, lwd = 3 ,
#        legend=c("Nameplate Capacity"),
#        col=c("green"),
#        pch=c("-"))
x11()
plot(tfeas$total,tfeas$total,
#type="o",
cex = .7, col="blue",xaxs="i",
yaxs="i",ylim=c(2000,5000),#ann  = FALSE,
#xaxt="n",
xlab="Available Generating Capacity", ylab="MW")
axis(1, at=1:length(tfeas$peakgen),labels=tfeas$date, las=2)
points(tfeas$total,tfeas$total_gen,
#type="o",
cex = .7,col="red")
points(tfeas$total,tfeas$total_load,
#type="o",
cex = .7,col="green")
# lines(tfeas$total,tfeas$peakgen, type="o",cex = .7,col="red")
# #lines(tfeas$total,tfeas$total_gen, type="o",cex = .7, pch=22, lty=2, col="green")
# #lines(tfeas$total,tfeas$total_load, type="o",cex = .7, pch=22, lty=2, col="black")
#
#
#
legend( x= "bottomright", y=0.92, lwd = 3,
legend=c("Available Capacity", "Modelled Gen", "Modelled Load Supplied"),
col=c("blue", "red", "green"),
pch=c("-","-", "-", "-"))
diamonds
library(ggplot2)
library(stringr)
#setwd("C:/Users/Alastair/Documents/HillRacingAnalysis")
setwd("C:/Users/s0822514/Dropbox/HillRacingAnalysis")
dump("add2", file="time.to.seconds.R")
source("time.to.seconds.R")
trim <- function (x) gsub("\n| \n", "", x)
#Create Runs data frame
Runs <- read.csv("SHR",row.names = NULL)
Runs$Date <- as.Date(Runs$Date,"%d/%m/%Y")
Runs$Time <-time.to.seconds(Runs$Time)
Runs$Runnerid<-paste(as.character(Runs$Runner),as.character(Runs$Club))
Runs<-Runs[,c(8,1:7)]
Runs$Race<-trim(Runs$Race)
Runs$Race<-as.factor(Runs$Race)
Runs$X.Winner<-as.numeric(gsub("%","",Runs$X.Winner))
Runs<-left_join(Runs,Races)
#Create Races data Frame
Races <- distinct(read.csv("Races",row.names = NULL))
Races$Distance<-as.numeric(str_split_fixed(as.character(Races$Distance)," ",2)[,1])
Races$Climb<-as.numeric(str_split_fixed(as.character(Races$Climb)," ",2)[,1])
t<-str_split_fixed(as.character(Races$M_record_time)," ",3)[,1]
Races$M_record_time <-time.to.seconds(t)
t<-str_split_fixed(as.character(Races$F_record_time)," ",3)[,1]
Races$F_record_time <-time.to.seconds(t)
Races$M_record_year<-as.numeric(gsub("\\)|\\(", "",Races$M_record_year))
Races$F_record_year<-as.numeric(gsub("\\)|\\(", "",Races$F_record_year))
Races$M_record_holder<-gsub(" - ", "",Races$M_record_holder)
Races$F_record_holder<-gsub(" - ", "",Races$F_record_holder)
###WOULD LIKE AN NRUNNERS STAT FOR RACES
Results<-left_join(summarise(group_by(Runs,Race,Date),n_runners = n(),avg_time = mean(Time)),Races)
#Create Runners data Frame)
Runners<-summarise(group_by(left_join(Runs,Races),Runner,Club),n_races = n(),avg_Winner_Pct = mean(X.Winner), avg_distance = mean(Distance), avg_climb=mean(Climb))
#Create Clubs data Frame
library(ggplot2)
library(stringr)
setwd("C:/Users/Alastair/Documents/HillRacingAnalysis")
#setwd("C:/Users/s0822514/Dropbox/HillRacingAnalysis")
dump("add2", file="time.to.seconds.R")
source("time.to.seconds.R")
trim <- function (x) gsub("\n| \n", "", x)
#Create Runs data frame
Runs <- read.csv("SHR",row.names = NULL)
Runs$Date <- as.Date(Runs$Date,"%d/%m/%Y")
Runs$Time <-time.to.seconds(Runs$Time)
Runs$Runnerid<-paste(as.character(Runs$Runner),as.character(Runs$Club))
Runs<-Runs[,c(8,1:7)]
Runs$Race<-trim(Runs$Race)
Runs$Race<-as.factor(Runs$Race)
Runs$X.Winner<-as.numeric(gsub("%","",Runs$X.Winner))
Runs<-left_join(Runs,Races)
#Create Races data Frame
Races <- distinct(read.csv("Races",row.names = NULL))
Races$Distance<-as.numeric(str_split_fixed(as.character(Races$Distance)," ",2)[,1])
Races$Climb<-as.numeric(str_split_fixed(as.character(Races$Climb)," ",2)[,1])
t<-str_split_fixed(as.character(Races$M_record_time)," ",3)[,1]
Races$M_record_time <-time.to.seconds(t)
t<-str_split_fixed(as.character(Races$F_record_time)," ",3)[,1]
Races$F_record_time <-time.to.seconds(t)
Races$M_record_year<-as.numeric(gsub("\\)|\\(", "",Races$M_record_year))
Races$F_record_year<-as.numeric(gsub("\\)|\\(", "",Races$F_record_year))
Races$M_record_holder<-gsub(" - ", "",Races$M_record_holder)
Races$F_record_holder<-gsub(" - ", "",Races$F_record_holder)
###WOULD LIKE AN NRUNNERS STAT FOR RACES
Results<-left_join(summarise(group_by(Runs,Race,Date),n_runners = n(),avg_time = mean(Time)),Races)
#Create Runners data Frame)
Runners<-summarise(group_by(left_join(Runs,Races),Runner,Club),n_races = n(),avg_Winner_Pct = mean(X.Winner), avg_distance = mean(Distance), avg_climb=mean(Climb))
#Create Clubs data Frame
library(ggplot2)
library(stringr)
library(dplyr)
setwd("C:/Users/Alastair/Documents/HillRacingAnalysis")
#setwd("C:/Users/s0822514/Dropbox/HillRacingAnalysis")
dump("add2", file="time.to.seconds.R")
source("time.to.seconds.R")
trim <- function (x) gsub("\n| \n", "", x)
#Create Runs data frame
Runs <- read.csv("SHR",row.names = NULL)
Runs$Date <- as.Date(Runs$Date,"%d/%m/%Y")
Runs$Time <-time.to.seconds(Runs$Time)
Runs$Runnerid<-paste(as.character(Runs$Runner),as.character(Runs$Club))
Runs<-Runs[,c(8,1:7)]
Runs$Race<-trim(Runs$Race)
Runs$Race<-as.factor(Runs$Race)
Runs$X.Winner<-as.numeric(gsub("%","",Runs$X.Winner))
Runs<-left_join(Runs,Races)
#Create Races data Frame
Races <- distinct(read.csv("Races",row.names = NULL))
Races$Distance<-as.numeric(str_split_fixed(as.character(Races$Distance)," ",2)[,1])
Races$Climb<-as.numeric(str_split_fixed(as.character(Races$Climb)," ",2)[,1])
t<-str_split_fixed(as.character(Races$M_record_time)," ",3)[,1]
Races$M_record_time <-time.to.seconds(t)
t<-str_split_fixed(as.character(Races$F_record_time)," ",3)[,1]
Races$F_record_time <-time.to.seconds(t)
Races$M_record_year<-as.numeric(gsub("\\)|\\(", "",Races$M_record_year))
Races$F_record_year<-as.numeric(gsub("\\)|\\(", "",Races$F_record_year))
Races$M_record_holder<-gsub(" - ", "",Races$M_record_holder)
Races$F_record_holder<-gsub(" - ", "",Races$F_record_holder)
###WOULD LIKE AN NRUNNERS STAT FOR RACES
Results<-left_join(summarise(group_by(Runs,Race,Date),n_runners = n(),avg_time = mean(Time)),Races)
#Create Runners data Frame)
Runners<-summarise(group_by(left_join(Runs,Races),Runner,Club),n_races = n(),avg_Winner_Pct = mean(X.Winner), avg_distance = mean(Distance), avg_climb=mean(Climb))
#Create Clubs data Frame
library(ggplot2)
library(stringr)
library(dplyr)
setwd("C:/Users/Alastair/Documents/HillRacingAnalysis")
#setwd("C:/Users/s0822514/Dropbox/HillRacingAnalysis")
dump("add2", file="time.to.seconds.R")
trim <- function (x) gsub("\n| \n", "", x)
Runs <- read.csv("SHR",row.names = NULL)
Runs$Date <- as.Date(Runs$Date,"%d/%m/%Y")
Runs$Time <-time.to.seconds(Runs$Time)
Runs$Runnerid<-paste(as.character(Runs$Runner),as.character(Runs$Club))
View(Runs)
Runs<-Runs[,c(8,1:7)]
Runs$Race<-trim(Runs$Race)
Runs$Race<-as.factor(Runs$Race)
Runs$X.Winner<-as.numeric(gsub("%","",Runs$X.Winner))
#Create Races data Frame
Races <- distinct(read.csv("Races",row.names = NULL))
getwd()
Races <- distinct(read.csv("Races",row.names = NULL))
read.csv("Races",row.names = NULL)
read.table("Races",row.names = NULL,sep=',')
list.files
list.files()
library(ggplot2)
library(stringr)
library(dplyr)
setwd("C:/Users/Alastair/Dropbox/HillRacingAnalysis")
#setwd("C:/Users/s0822514/Dropbox/HillRacingAnalysis")
dump("add2", file="time.to.seconds.R")
source("time.to.seconds.R")
trim <- function (x) gsub("\n| \n", "", x)
#Create Runs data frame
Runs <- read.csv("SHR",row.names = NULL)
Runs$Date <- as.Date(Runs$Date,"%d/%m/%Y")
Runs$Time <-time.to.seconds(Runs$Time)
Runs$Runnerid<-paste(as.character(Runs$Runner),as.character(Runs$Club))
Runs<-Runs[,c(8,1:7)]
Runs$Race<-trim(Runs$Race)
Runs$Race<-as.factor(Runs$Race)
Runs$X.Winner<-as.numeric(gsub("%","",Runs$X.Winner))
Runs<-left_join(Runs,Races)
#Create Races data Frame
Races <- distinct(read.csv("Races",row.names = NULL))
Races$Distance<-as.numeric(str_split_fixed(as.character(Races$Distance)," ",2)[,1])
Races$Climb<-as.numeric(str_split_fixed(as.character(Races$Climb)," ",2)[,1])
t<-str_split_fixed(as.character(Races$M_record_time)," ",3)[,1]
Races$M_record_time <-time.to.seconds(t)
t<-str_split_fixed(as.character(Races$F_record_time)," ",3)[,1]
Races$F_record_time <-time.to.seconds(t)
Races$M_record_year<-as.numeric(gsub("\\)|\\(", "",Races$M_record_year))
Races$F_record_year<-as.numeric(gsub("\\)|\\(", "",Races$F_record_year))
Races$M_record_holder<-gsub(" - ", "",Races$M_record_holder)
Races$F_record_holder<-gsub(" - ", "",Races$F_record_holder)
###WOULD LIKE AN NRUNNERS STAT FOR RACES
Results<-left_join(summarise(group_by(Runs,Race,Date),n_runners = n(),avg_time = mean(Time)),Races)
#Create Runners data Frame)
Runners<-summarise(group_by(left_join(Runs,Races),Runner,Club),n_races = n(),avg_Winner_Pct = mean(X.Winner), avg_distance = mean(Distance), avg_climb=mean(Climb))
#Create Clubs data Frame
View(Runners)
